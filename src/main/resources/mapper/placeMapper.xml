<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bside.cuokkamap.dao.PlaceDAO">
    <!-- 장소 등록  -->
    <insert id="savePlaceInfo">
        insert  into place(place_info, user_num)
        values  (#{place_info}, #{user_num})
    </insert>
    <!-- 필터 등록 -->
    <insert id='insertFilterList'>
        INSERT 	place_filter(place_num, filter_type)
        VALUES
        <foreach collection="filterList" item="item" separator=",">
            (#{place_num}, #{item})
        </foreach>
    </insert>
    <!-- 이미지 등록 -->
    <insert id='savePlaceImg'>
        INSERT 	place_img(place_num, user_num, placeImg_src)
        VALUES  (#{place_num}, #{user_num}, #{placeImg_src})
    </insert>
    <!-- 리뷰 등록 -->
    <insert id='savePlaceReview'>
        INSERT 	place_review(place_num, user_num, placeReview, placeReview_emoji)
        VALUES  (#{place_num}, #{user_num}, #{placeReview}, #{placeReview_emoji})
    </insert>
    <!-- 즐겨찾기 등록 // TODO(BE) favorite_type 기능 추가시 xml 수정 필요-->
    <insert id='saveFavoritePlace'>
        INSERT 	favorite_place(place_num, user_num, favorite_type)
        SELECT  #{place_num}, #{user_num}, 0  FROM DUAL
        WHERE NOT EXISTS
            (SELECT place_num, user_num,favorite_type
             FROM favorite_place
             WHERE place_num = #{place_num}
               AND user_num = #{user_num}
               AND favorite_type = 0)
    </insert>

    <!-- 방금 해당 유저가 등록한 place_num 받아오기 -->
    <select id='getPlaceNum' resultType='int'>
        SELECT  place_num
        FROM  	place
        WHERE   user_num =#{param1}
        ORDER 	BY place_num DESC
            LIMIT 	1
    </select>

    <select id="selectALLPlaceWithFilterAndKeyword" resultType="com.bside.cuokkamap.vo.PlaceVO">
        SELECT p.place_num, p.place_info,
        (SELECT GROUP_CONCAT(pf.filter_type SEPARATOR ', ')
        FROM place_filter pf
        WHERE pf.place_num = p.place_num) AS filter_type
        FROM place p
        <where>
            <if test="param4 > 0">
                AND (
                <foreach collection="param3" item="keyword" separator="AND">
                    EXISTS (
                    SELECT 1
                    FROM (
                    SELECT #{keyword} AS keyword
                    ) t
                    WHERE p.place_info LIKE CONCAT('%', t.keyword, '%')
                    )
                </foreach>
                )
            </if>
            <if test="param2 > 0">
                AND (
                <foreach collection="param1" item="filter" separator="AND">
                    EXISTS (
                    SELECT 1
                    FROM (
                    SELECT #{filter} AS filter
                    ) t
                    WHERE t.filter IN (
                    SELECT pf.filter_type FROM place_filter pf WHERE pf.place_num = p.place_num
                    )
                    )
                </foreach>
                )
            </if>
        </where>
    </select>

    <select id="cntSamePlace" resultType='int'>
        SELECT COUNT(*)
        FROM place
        WHERE place_info LIKE CONCAT('%', CONCAT('"x":', #{param1}), '%')
          AND place_info LIKE CONCAT('%', CONCAT('"y":', #{param2}), '%')
    </select>

    <select id="selectPlaceByPlaceNum" resultType="com.bside.cuokkamap.vo.PlaceVO">
        SELECT  place_num, place_info
        FROM    place WHERE place_num = #{param1}
    </select>

    <select id="selectResentPlaceImgByUserNum" resultType="com.bside.cuokkamap.vo.PlaceVO">
        SELECT  place_num, user_num, placeImg_src, placeImg_num
        FROM    place_img
        WHERE user_num = #{param1}
        ORDER 	BY placeImg_num DESC
        LIMIT 	1
    </select>
    <select id="selectResentPlaceReviewByUserNum" resultType="com.bside.cuokkamap.vo.PlaceVO">
        SELECT  place_num, user_num, placeReview, placeReview_emoji, placeReview_num
        FROM    place_review
        WHERE user_num = #{param1}
        ORDER 	BY placeReview_num DESC
        LIMIT 	1
    </select>
    <select id="selectResentFavoritePlaceByUserNum" resultType="com.bside.cuokkamap.vo.PlaceVO">
        SELECT  favoritePlace_num, place_num, user_num, favorite_type
        FROM    favorite_place
        WHERE   user_num = #{param1}
        ORDER 	BY favoritePlace_num DESC
        LIMIT 	1
    </select>
    <select id="selectPlaceImgByPlaceNum" resultType="com.bside.cuokkamap.vo.PlaceVO">
        SELECT p.place_num, pi.user_num, pi.placeImg_num, pi.placeImg_src, pi.placeImg_writedate
        FROM place p
                 JOIN place_img pi
                     ON p.place_num = pi.place_num
        WHERE p.place_num = #{param1}
    </select>
    <select id="selectPlaceReviewByPlaceNum" resultType="com.bside.cuokkamap.vo.PlaceVO">
        SELECT p.place_num, pr.user_num, pr.placeReview_num, pr.placeReview, pr.placeReview_emoji, pr.placeReview_writedate
        FROM place p
                 JOIN place_review pr
                      ON p.place_num = pr.place_num
        WHERE p.place_num = #{param1}
    </select>
    <select id="selectPlaceFilterByPlaceNum" resultType="String">
        SELECT GROUP_CONCAT(pf.filter_type SEPARATOR ', ') AS filter_types
        FROM place p
                 LEFT JOIN place_filter pf ON p.place_num = pf.place_num
        WHERE p.place_num = #{param1}
        GROUP BY p.place_num, p.place_info
    </select>

    <delete id="deletePlaceImg">
        DELETE FROM place_img
        WHERE placeImg_num = #{placeImg_num}
          AND user_num = #{user_num}
          AND placeImg_src = #{placeImg_src};
    </delete>
    <!--
    <select id="selectPlaceByKeyword" resultType="com.bside.cuokkamap.vo.PlaceVO">
        select  place_num, place_info
        from    place where place_info = #{param1}
    </select>

    <select id="selectPlaceByFilter" resultType="com.bside.cuokkamap.vo.PlaceVO">
        select  user_num, login_id, signup_date, email, role
        from    user where login_id = #{param1}
    </select>
    -->

    <!-- 수정 기능 -->

    <!-- 삭제 기능 -->

</mapper>